
#Criar a Ã¡rea de trabalho
mkdir moheft
cd moheft
git clone https://gitlab.com/gui.alm02/llvm-project-moheft.git

#Criar o container
#sudo docker run -v $PWD:/moheft -it ubuntu:20.04
sudo docker run -v $PWD:/moheft -it ompc-build

######################################################



python3 -m virtualenv venv
source venv/bin/activate
pip install -e ".[dev]"


######################################################

export WORK_DIR=/moheft
export BUILD_DIR=$WORK_DIR/_build-llvm_ubuntu20_2

export CC=clang
export CXX=clang++

mkdir $BUILD_DIR
cd $BUILD_DIR

cmake $WORK_DIR/llvm-project-moheft/llvm -DCMAKE_BUILD_TYPE=Release -DLLVM_ENABLE_PROJECTS="clang;openmp" -DLLVM_USE_LINKER=gold -DLLVM_TARGETS_TO_BUILD="X86;NVPTX" -DLLVM_ENABLE_ASSERTIONS=On -DLIBOMPTARGET_ENABLE_DEBUG=On -DLIBOMPTARGET_ENABLE_PROFILER=On -DLLVM_CCACHE_BUILD=On

make

export PATH=$BUILD_DIR/bin/:$PATH
export LD_LIBRARY_PATH=$BUILD_DIR/lib/:$LD_LIBRARY_PATH
export LIBRARY_PATH=$BUILD_DIR/lib/:$LIBRARY_PATH
export CPATH=$BUILD_DIR/projects/openmp/runtime/src:$CPATH


cd ..
git clone https://gitlab.com/gui.alm02/my-ompc-examples.git
cd my-ompc-examples/dependencies
cd hello-world

export OMPCLUSTER_SCHEDULER=nheft
clang++ -fopenmp -fopenmp-targets=x86_64-pc-linux-gnu hello-world.cc -o hello-world
mpirun -np 4 ./hello-world

clang++ -fopenmp -fopenmp-targets=x86_64-pc-linux-gnu workflow.cc -o workflow && mpirun -np 4 ./workflow

